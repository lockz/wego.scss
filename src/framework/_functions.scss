@charset "UTF-8";


/**
*	Получение названия шрифта по его типу.
*	@param {string} $type - тип шрифта (regular, bold и т.д.).
*	@return {string} Возвращает название шрифта или null и
*	генериурет предупреждение, если такой шрифт не найден.
*/
@function font($type) {
	@if map-has-key($fonts, $type) {
		@return map-get($fonts, $type);
	}

	@warn "Unknown font type `#{$type}`";

	@return null;
}


/**
*	Получение цвета из списка цветов сайта.
*	@param {string} $name - название цвета.
*	@param {string} $state [] - состояние цвета (hover, active, disabled).
*	@return {color} Возвращает цвет или вызывает ошибку, если такой цвет не найден.
*/
@function color($name, $state: "") {
	@if map-has-key($colors, $name) {
		$color: map-get($colors, $name);
		$color: color-modify($color, $state);

		@return $color;
	}

	@warn "Unknown color '#{$name}'";

	@return null;
}


/**
*	Модификация цвета.
*	@param {color} $color - цвет.
*	@param {string} $state [hover] - состояние цвета (hover, active, disabled).
*	@return {color} Возвращает модифицированный цвет.
*/
@function color-modify($color, $state: 'hover') {
	@if $state == "hover" {
		$color: tint($color, 20%);
	} @elseif $state == "active" {
		$color: shade($color, 20%);
	} @elseif $state == "disabled" {
		$color: tint(desaturate($color, 70%), 20%);
	}

	@return $color;
}


/**
*	Получение цвета материального дизайна по его названию и коду.
*	@param {string} $name - название цвета.
*	@param {string | number} $accent - код цвета (акцент).
*	@return {color} Возвращает цвет или вызывает ошибку и возвращает null, если цвет не найден.
*/
@function material-color($name, $accent) {
	$name: to-lower-case($name);

	@if type-of($accent) == number {
		$accent: inspect($accent);
	}
	$accent: to-lower-case($accent);

	@if map-has-key($material-colors, $name) {
		$selected: map-get($material-colors, $name);

		@if map-has-key($selected, $accent) {
			@return map-get($selected, $accent);
		}

		@warn "Unknown accent `#{$accent}`";
	} @else {
		@warn "Unknown color `#{$name}`";
	}

	@return null;
}


/**
*	@alias material-color
*/
@function mcolor($name, $accent) {
	@return material-color($name, $accent);
}


/**
*	Получние высоты UI элемента по названию.
*	@param {string} $name - название размера.
*	@return {color} Возвращает высоты в пикселях или null и вызывает ошибку, если размер не найден.
*/
@function ui-size($name) {
	@if map-has-key($ui-sizes, $name) {
		@return map-get($ui-sizes, $name);
	}

	@warn "Unknown ui size `#{$name}`";

	@return null;
}


/**
*	Вычисление внутреннего отступа для центрирования текста в блоке.
*	@param {number} $ui-height - высота элемента (пиксели).
*	@param {number} $font-size - размер шрифта (пиксели).
*	@param {number} $line-height [1] - высота строки (относительная в em).
*	@return {number} Отступ в пикселях как одно значение. Если отступ получился не целым,
*	то он округляется до ближайшего целого меньшего числа.
*/
@function calc-ui-padding($ui-height, $font-size, $line-height: 1) {
	$padding: floor(($ui-height - $font-size * $line-height) / 2);
	@return $padding;
}


/**
*	Вычисление размера шрифта для UI.
*	@param {number} $ui-height - размер UI элемента в пикселях.
*	@param {number} $ratio [.4] - модификатор размера шрифта (от 0 до 1).
*	@return {number} Размер шрифта в пикселях.
*/
@function calc-ui-font($ui-height, $ratio: .4) {
	$font-size: floor($ui-height * $ratio);
	@return $font-size;
}