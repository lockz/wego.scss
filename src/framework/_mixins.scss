@charset 'UTF-8';


/**
*	Очистка плавающих блоков.
*	@output Выводит псевдо блоки.
*/
@mixin clearfix() {
	&:before, &:after {
		content: '';
		display: table;
	}

	&:after {
		clear: both;
	}
}


/**
*	Применение кода только для определенного экрана.
*	@param {string} $size - название размера экрана.
*	@output Выводит стиль @content.
*/
@mixin respond-to($size) {
	// To avoid bug with horizontal scroll
	$scroll-width: 20px;

	@if ($size == lg) {
		$min_width: map-get($screens, 'lg') + $grid_gutter + $scroll-width;
		@media screen and (min-width: $min_width) { @content; }
	}

	@else if ($size == md) {
		$max_width: map-get($screens, 'lg') + $grid_gutter + $scroll-width - 1;
		$min_width: map-get($screens, 'md') + $grid_gutter + $scroll-width;
		@media screen and (min-width: $min_width) and (max-width: $max_width) { @content; }
	}

	@else if ($size == sm) {
		$max_width: map-get($screens, 'md') + $grid_gutter + $scroll-width - 1;
		$min_width: map-get($screens, 'sm') + $grid_gutter + $scroll-width;
		@media screen and (min-width: $min_width) and (max-width: $max_width) { @content; }
	}

	@else if ($size == xs) {
		$max_width: map-get($screens, 'sm') + $grid_gutter + $scroll-width - 1;
		@media screen and (max-width: $max_width) { @content; }
	}

	@else {
		@warn 'Unknown size type `#{$size}`';
	}
}


/**
*	Применение кода только для определенных экранов.
*	@param {list} $sizes - список экранов.
*	@output Выводит стиль @content.
*/
@mixin respond($sizes...) {
	@each $size in $sizes {
		@include respond-to($size) {
			@content;
		}
	}
}


/**
*	Невлезающий текст обрезается многоточием (только одна строка).
*	@output Выводит стиль.
*/
@mixin text-ellipsis() {
	text-overflow: ellipsis;
	white-space: nowrap;
	overflow: hidden;
}


/**
*	Обрезка невлезающего текста многоточием (многострочный).
*	@param {number} $lines - количество строк.
*	@param {color} $color [#fff] - цвет перекрытия текста.
*	@param {number} $font-size [$font-size] - размер шрифта.
*	@param {number} $line-height [1.25] - высота строки в em.
*	@param {boolean} $as-link [false] - отображать текст как ссылку.
*	@output Выводит стиль для div > span > текст тут.
*/
@mixin text-ellipsis-ml($lines, $color: #fff, $font-size: $font-size, $line-height: 1.25, $as-link: false) {
	$height: round($font-size * $line-height * $lines);

	max-height: $height;
	overflow: hidden;

	&:before {
		content: "";
		float: left;
		width: 5px;
		height: $height;
	}

	&:after {
		content: "\2026";
		position: relative;
		top: -($height / $lines);
		left: 100%;
		float: right;
		margin-left: -3em;
		padding-right: 5px;
		width: 3em;
		text-align: right;

		@include background-image(linear-gradient(to right, rgba($color, 0.0), $color 60%));
	}

	span {
		float: right;
		margin-left: -5px;
		width: 100%;
		font-size: $font-size;
		line-height: $line-height;
		text-align: justify;
	}

	@if $is_link {
		&:hover {
			span {
				text-decoration: underline;
			}
		}
	}
}


/**
*	Глубина сцены (отрисовка тени).
*	@param {number} $level - уровень элемента (от 0 до 6).
*	@output Выводит тень box-shadow.
*/
@mixin depth($level) {
	@if $level < 1 or $level > 6 {
		@include box-shadow(none);
	} @else {
		$offset: nth(1.5 3 10 14 19 25, $level) * 1px;
		$blur: nth(1.5 3 10 14 19 25, $level) * 4px;
		$color: rgba(#000, nth(.12 .16 .19 .25 .30 .36, $level));
		$top-shadow: 0 $offset $blur $color;
		
		$offset: nth(1.5 3 6 10 15 21, $level) * 1px;
		$blur: nth(1 3 3 5 6 7, $level) * 4px;
		$color: rgba(#000, nth(.24 .23 .23 .22 .22 .21, $level));
		$bottom-shadow: 0 $offset $blur $color;

		@include box-shadow($top-shadow, $bottom-shadow);
	}
}


/**
*	Стилизация стандартного скроллбара (только webkit).
*	@param {color} $thumb [rgba(#9e9e9e, .7)] - цвет скролла.
*	@param {color} $track [rgba(#fff, .5)] - цвет дорожки скролла.
*	@param {number} $width [6px] - ширина скролла.
*	@param {number} $radius [0px] - радиус закругления скролла.
*	@output Выводит стиль скроллбара.
*/
@mixin scrollbar($thumb: rgba(#9e9e9e, .7), $track: rgba(#fff, .5), $width: 6px, $radius: 0px) {
	&::-webkit-scrollbar {
		width: $width;
	}

	&::-webkit-scrollbar-track {
		background-color: transparent;

		&:hover {
			background-color: $track;
		}
	}

	&::-webkit-scrollbar-thumb {
		background-color: transparentize($thumb, .3);
		@include border-radius($radius);

		&:hover {
			background-color: $thumb;
		}
	}
}